Boa! üöÄ Bora **desmistificar a Programa√ß√£o Orientada a Objetos (POO) em Java** de forma clara, pr√°tica e sem enrola√ß√£o.

---

## üåé O que √© POO?

POO (Programa√ß√£o Orientada a Objetos) √© um **paradigma de programa√ß√£o** que organiza o c√≥digo em **objetos**, que representam coisas do mundo real ou conceitos, cada um com seus **atributos** (caracter√≠sticas) e **m√©todos** (a√ß√µes).

---

## üß© Os 4 Pilares da POO

### 1. **Abstra√ß√£o**

√â o processo de **modelar um objeto real** para o c√≥digo, focando apenas no que importa para o problema.
‚û°Ô∏è Exemplo: um `Carro` tem `cor`, `modelo` e pode `acelerar()`, mas n√£o precisamos modelar quantos parafusos ele tem.

```java
class Carro {
    String modelo;
    String cor;

    void acelerar() {
        System.out.println("O carro est√° acelerando...");
    }
}
```

---

### 2. **Encapsulamento**

Esconder os detalhes internos e permitir acesso apenas de forma controlada.
‚û°Ô∏è Usamos `private` nos atributos e `getters/setters` para acessar.

```java
class ContaBancaria {
    private double saldo;

    public ContaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    public double getSaldo() {
        return saldo;
    }

    public void depositar(double valor) {
        saldo += valor;
    }

    public void sacar(double valor) {
        if (valor <= saldo) saldo -= valor;
        else System.out.println("Saldo insuficiente!");
    }
}
```

---

### 3. **Heran√ßa**

Permite que uma classe herde caracter√≠sticas e comportamentos de outra.
‚û°Ô∏è A classe `Cachorro` herda de `Animal`.

```java
class Animal {
    void comer() {
        System.out.println("O animal est√° comendo...");
    }
}

class Cachorro extends Animal {
    void latir() {
        System.out.println("O cachorro est√° latindo...");
    }
}
```

---

### 4. **Polimorfismo**

Um mesmo m√©todo pode ter **diferentes comportamentos** dependendo do contexto.
‚û°Ô∏è Isso pode ser feito sobrescrevendo m√©todos (`@Override`) ou sobrecarregando m√©todos (mesmo nome, par√¢metros diferentes).

```java
class Animal {
    void emitirSom() {
        System.out.println("Som gen√©rico do animal");
    }
}

class Gato extends Animal {
    @Override
    void emitirSom() {
        System.out.println("Miau!");
    }
}

class Cachorro extends Animal {
    @Override
    void emitirSom() {
        System.out.println("Au au!");
    }
}
```

---

## üéØ Mini Desafio (POO na pr√°tica)

Implemente um sistema simples de **cadastro de ve√≠culos**:

* `Veiculo` ‚Üí classe base com atributos `marca` e `ano`.
* `Carro` e `Moto` ‚Üí herdam de `Veiculo`.
* Cada classe deve ter um m√©todo `exibirInfo()` que imprime os dados (polimorfismo).

‚û°Ô∏è Exemplo de uso:

```java
public class Main {
    public static void main(String[] args) {
        Veiculo carro = new Carro("Toyota", 2020, 4);
        Veiculo moto = new Moto("Honda", 2019, 150);

        carro.exibirInfo();
        moto.exibirInfo();
    }
}
```

**Sa√≠da esperada:**

```
Carro - Marca: Toyota, Ano: 2020, Portas: 4
Moto - Marca: Honda, Ano: 2019, Cilindradas: 150
```

---

üëâ Quer que eu escreva o c√≥digo completo desse desafio (com as classes `Veiculo`, `Carro` e `Moto`) j√° pronto para voc√™ rodar no Java?
